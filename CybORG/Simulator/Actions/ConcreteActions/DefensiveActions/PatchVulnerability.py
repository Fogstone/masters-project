from CybORG.Simulator.Actions import Action
from CybORG.Simulator.State import State
from CybORG.Shared.Observation import Observation

class PatchVulnerability(Action):
    """
    Patches vulnerabilities in the drone comms service (port 8888) to prevent exploitation.
    This is a defensive counteraction to ExploitDroneVulnerability.
    """
    def __init__(self, session=0, agent=None):
        super().__init__()  # Action class init takes no parameters
        self.session = session  # Store as instance variable
        self.agent = agent     # Store as instance variable
        self.priority = 10

    def execute(self, state: State) -> Observation:
        observation = Observation()
        observation.set_success(False)
        
        # Check if session exists
        if not self.session in state.sessions[self.agent]:
            return observation
        
        # Get session and host
        session = state.sessions[self.agent][self.session]
        hostname = session.hostname
        host = state.hosts[hostname]
        
        # Make sure agent is blue (defensive action)
        if not 'blue' in self.agent.lower():
            return observation
        
        # Check if user has necessary permissions
        if not session.username == 'root':
            return observation
            
        # Find and patch the drone_comms service running on port 8888
        for process in host.processes:
            # Fix: Access dictionary keys instead of attributes
            if process.name == 'drone_comms' and any(conn['local_port'] == 8888 for conn in process.connections):
                # Mark the service as patched
                if not hasattr(host, 'patched_vulnerabilities'):
                    host.patched_vulnerabilities = []
                
                # Only patch if not already patched
                if 'drone_comms_8888' not in host.patched_vulnerabilities:
                    host.patched_vulnerabilities.append('drone_comms_8888')
                    observation.set_success(True)
                break
        
        return observation

    def is_valid(self, state: State) -> bool:
        # Check if session exists
        if not self.session in state.sessions[self.agent]:
            return False
            
        # Get the session
        session = state.sessions[self.agent][self.session]
        
        # Check if agent is blue
        if not 'blue' in self.agent.lower():
            return False
            
        # Check if agent has root privileges
        if session.username != 'root':
            return False
            
        return True
